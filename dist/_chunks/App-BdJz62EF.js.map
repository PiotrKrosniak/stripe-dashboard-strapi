{"version":3,"file":"App-BdJz62EF.js","sources":["../../admin/src/pages/HomePage.jsx","../../admin/src/pages/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Main,\n  Box,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Td,\n  Th,\n  Loader,\n  Typography,\n  Badge,\n  Flex,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst HomePage = () => {\n  const { formatMessage } = useIntl();\n  const [payments, setPayments] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const response = await fetch('/stripe-dashboard/stats');\n        const result = await response.json();\n        setPayments(result.data);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  if (isLoading) return (\n    <Box padding={8} background=\"neutral100\">\n      <Loader>Loading content...</Loader>\n    </Box>\n  );\n\n  return (\n    <Main>\n      <Typography variant=\"alpha\">\n        Welcome to {formatMessage({ id: 'plugin.name' })}\n      </Typography>\n\n      <Box\n        padding={4}\n        marginTop={4}\n        background=\"neutral0\"\n        hasRadius\n        shadow=\"tableShadow\"\n      >\n        <Typography variant=\"beta\" as=\"h2\" style={{ marginBottom: '1rem' }}>\n          Stripe Payments\n        </Typography>\n\n        <Table colCount={9} rowCount={payments.length}>\n          <Thead>\n            <Tr>\n              <Th>ID</Th>\n              <Th>Amount</Th>\n              <Th>Status</Th>\n              <Th>Customer</Th>\n              <Th>Card</Th>\n              <Th>Description</Th>\n              <Th>Payment Method</Th>\n              <Th>Date</Th>\n              <Th>Receipt</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {payments.map((payment) => (\n              <Tr key={payment.id}>\n                <Td>\n                  <Typography variant=\"omega\">{payment.id}</Typography>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\" fontWeight=\"bold\">\n                    {payment.currency.toUpperCase()} {payment.amount}\n                  </Typography>\n                </Td>\n                <Td>\n                  <Badge \n                    textColor={payment.status === 'succeeded' ? 'success600' : 'danger600'}\n                    backgroundColor={payment.status === 'succeeded' ? 'success100' : 'danger100'}\n                  >\n                    {payment.status}\n                  </Badge>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\">\n                    {payment.customer_email || 'N/A'}\n                  </Typography>\n                </Td>\n                <Td>\n                  <Flex>\n                    {payment.card_brand && payment.last4 ? (\n                      <>\n                        <Typography variant=\"omega\" fontWeight=\"bold\">\n                          {payment.card_brand.toUpperCase()}\n                        </Typography>\n                        <Typography variant=\"omega\" textColor=\"neutral600\">\n                          &nbsp;**** {payment.last4}\n                        </Typography>\n                      </>\n                    ) : 'N/A'}\n                  </Flex>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\">\n                    {payment.description || 'N/A'}\n                  </Typography>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\">\n                    {payment.payment_method_type || 'N/A'}\n                  </Typography>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\">\n                    {new Date(payment.date).toLocaleDateString(undefined, {\n                      year: 'numeric',\n                      month: 'short',\n                      day: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </Typography>\n                </Td>\n                <Td>\n                  <Typography variant=\"omega\">\n                    {payment.receipt_email || 'N/A'}\n                  </Typography>\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </Box>\n    </Main>\n  );\n};\n\nexport { HomePage };\n\n","import { Page } from '@strapi/strapi/admin';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { HomePage } from './HomePage';\n\nconst App = () => {\n  return (\n    <Routes>\n      <Route index element={<HomePage />} />\n      <Route path=\"*\" element={<Page.Error />} />\n    </Routes>\n  );\n};\n\nexport { App };\n"],"names":["useIntl","useState","useEffect","jsx","Box","Loader","Main","jsxs","Typography","Table","Thead","Tr","Th","Tbody","Td","Badge","Flex","Fragment","Routes","Route","Page"],"mappings":"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"}